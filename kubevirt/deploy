#!/bin/bash
set -e

HERE=$(dirname "$(readlink --canonicalize "$BASH_SOURCE")")
. "$HERE/../scripts/_env"
. "$ROOT/scripts/_trap"

# https://kubevirt.io/quickstart_minikube/

if [ "$1" == -c ]; then
	"$HERE/delete"
fi

. "$HERE/_env"

m 'deploying KubeVirt...'

kubectl apply --filename="https://github.com/kubevirt/kubevirt/releases/download/$KUBEVIRT_VERSION/kubevirt-operator.yaml"

if [ "$KUBEVIRT_EMULATION" == true ]; then
	kubectl create configmaps kubevirt-config --from-literal debug.useEmulation=true --namespace kubevirt
fi

kubectl apply --filename="https://github.com/kubevirt/kubevirt/releases/download/$KUBEVIRT_VERSION/kubevirt-cr.yaml"

m 'waiting for KubeVirt to start...'

DEPLOYMENT=$(kubectl get deployments --namespace=kubevirt --selector=kubevirt.io=virt-operator --output=jsonpath={.items[0].metadata.name})
kubectl wait "deployments/$DEPLOYMENT" --namespace=kubevirt \
	--for=condition=Available

POD=$(kubectl get pods --namespace=kubevirt --selector=kubevirt.io=virt-operator --output=jsonpath={.items[0].metadata.name})
kubectl wait "pods/$POD" --namespace=kubevirt \
	--for=condition=ContainersReady
 
POD=$(kubectl get pods --namespace=kubevirt --selector=kubevirt.io=virt-api --output=jsonpath={.items[0].metadata.name})
kubectl wait "pods/$POD" --namespace=kubevirt \
	--for=condition=ContainersReady

POD=$(kubectl get pods --namespace=kubevirt --selector=kubevirt.io=virt-controller --output=jsonpath={.items[0].metadata.name})
kubectl wait "pods/$POD" --namespace=kubevirt \
	--for=condition=ContainersReady
